import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { FINALS, INITIALS, MEDIALS } from 'src/common/constant/hangul.constant';
import { Word } from 'src/entity/word.entity';
import { DeepPartial, Repository } from 'typeorm';

@Injectable()
export class WordService {
  constructor(@InjectRepository(Word) private wordRepository: Repository<Word>) {}
  async getRandomWord() {
    const randomWord = await this.wordRepository
      .createQueryBuilder()
      .select('value')
      .orderBy('RANDOM()')
      .limit(1)
      .getRawOne();

    if (!randomWord) {
      throw new BadRequestException();
    }

    return randomWord;
  }

  async addWordsIntoDatabase(words: string) {
    const wordList = words
      .split(',')
      .map((word) => word.trim())
      .filter((word) => word.length > 0);
    console.log('üöÄ ~ WordService ~ addWordsIntoDatabase ~ wordList:', wordList);

    const wordEntities: DeepPartial<Word> = wordList.map((word) => {
      const { length } = this.checkWord(word);

      return { value: word, length };
    });

    await this.wordRepository.save(wordEntities);
  }

  checkWord(word: string) {
    const { arr, complexConsonantCount, complexVowelCount } = this.decomposeConstants(this.decomposeHangulString(word));
    const length = word.length;
    const cnt = arr.length;
    return { arr, length, cnt, complexConsonantCount, complexVowelCount };
  }

  private decomposeHangulString(str: string): string[] {
    const result: string[] = [];

    for (const char of str) {
      const code = char.charCodeAt(0) - 0xac00;

      if (code < 0 || code > 11171) {
        result.push(char);
        continue;
      }

      const initialIndex = Math.floor(code / 588);
      const medialIndex = Math.floor((code % 588) / 28);
      const finalIndex = code % 28;

      result.push(INITIALS[initialIndex], MEDIALS[medialIndex]);
      if (FINALS[finalIndex]) result.push(FINALS[finalIndex]);
    }

    return result;
  }

  private decomposeConstants(arr: string[]) {
    let complexConsonantCount = 0;
    let complexVowelCount = 0;

    const decomposed = arr.flatMap((char) => {
      switch (char) {
        case '„Ñ≤':
          complexConsonantCount++;
          return ['„Ñ±', '„Ñ±'];
        case '„Ñ≥':
          complexConsonantCount++;
          return ['„Ñ±', '„ÖÖ'];
        case '„Ñµ':
          complexConsonantCount++;
          return ['„Ñ¥', '„Öà'];
        case '„Ñ∂':
          complexConsonantCount++;
          return ['„Ñ¥', '„Öé'];
        case '„Ñ∏':
          complexConsonantCount++;
          return ['„Ñ∑', '„Ñ∑'];
        case '„Ñ∫':
          complexConsonantCount++;
          return ['„Ñπ', '„Ñ±'];
        case '„Ñª':
          complexConsonantCount++;
          return ['„Ñπ', '„ÖÅ'];
        case '„Ñº':
          complexConsonantCount++;
          return ['„Ñπ', '„ÖÇ'];
        case '„ÑΩ':
          complexConsonantCount++;
          return ['„Ñπ', '„ÖÖ'];
        case '„Ñæ':
          complexConsonantCount++;
          return ['„Ñπ', '„Öå'];
        case '„Ñø':
          complexConsonantCount++;
          return ['„Ñπ', '„Öç'];
        case '„ÖÄ':
          complexConsonantCount++;
          return ['„Ñπ', '„Öé'];
        case '„ÖÉ':
          complexConsonantCount++;
          return ['„ÖÇ', '„ÖÇ'];
        case '„ÖÑ':
          complexConsonantCount++;
          return ['„ÖÇ', '„ÖÖ'];
        case '„ÖÜ':
          complexConsonantCount++;
          return ['„ÖÖ', '„ÖÖ'];
        case '„Öâ':
          complexConsonantCount++;
          return ['„Öà', '„Öà'];
        case '„Öê':
          complexVowelCount++;
          return ['„Öè', '„Ö£'];
        case '„Öí':
          complexVowelCount++;
          return ['„Öë', '„Ö£'];
        case '„Öî':
          complexVowelCount++;
          return ['„Öì', '„Ö£'];
        case '„Öñ':
          complexVowelCount++;
          return ['„Öï', '„Ö£'];
        case '„Öò':
          complexVowelCount++;
          return ['„Öó', '„Öè'];
        case '„Öô':
          complexVowelCount++;
          return ['„Öó', '„Öè', '„Ö£'];
        case '„Öö':
          complexVowelCount++;
          return ['„Öó', '„Ö£'];
        case '„Öù':
          complexVowelCount++;
          return ['„Öú', '„Öì'];
        case '„Öû':
          complexVowelCount++;
          return ['„Öú', '„Öì', '„Ö£'];
        case '„Öü':
          complexVowelCount++;
          return ['„Öú', '„Ö£'];
        case '„Ö¢':
          complexVowelCount++;
          return ['„Ö°', '„Ö£'];
        default:
          return [char];
      }
    });

    return {
      arr: decomposed,
      complexConsonantCount,
      complexVowelCount,
    };
  }
}
